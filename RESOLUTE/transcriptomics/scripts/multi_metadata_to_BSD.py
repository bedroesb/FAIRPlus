#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Combine multiple metadata files (e.g. sample.json, contacts.json) to one BioSamples Json Object for submission

@author: fuqi
@18-09-2019
"""
import os
import sys
import json

os.chdir("/home/fuqi/EBI/FAIRPlus/RESOLUTE/transcriptomics/scripts")

metadata_dir = "../data/RESOLUTE_transcriptomics/"
BSD_out = "../data/RESOLUTE_transcriptomics_metadata_BSD.json"
BSD_schema_file = "../schemas/biosamples_sample.json"
# Sample name for submission
# TODO: automize
sample_name = "HuH7-3"
date = "2019-07-16T09:47:20.003Z"

# TODO add external links section
# TODO convert license to link format

# Select metadata that needs to be submitted to biosamples
BSD_lists = ["cell_line","contact","sample","license"]
meta_files = []
metadata = []
for i in BSD_lists:
    if i+".json" in os.listdir(metadata_dir):
        print(i + ": added to BioSamples metadata")
        with open(metadata_dir+i+".json","r") as f:
            metadata.append(json.load(f))

# Check if metadata included in BSD_schema.
# if so, keep original format. If not, convert to part of "characteristics" attribute
with open(BSD_schema_file,"r") as schema_file:
    BSD_schema = json.load(schema_file)
    
# Attributes that are already defined in BSD
BSD_defined = list(BSD_schema["properties"].keys()) + list(BSD_schema["definitions"].keys())
# Attributes that are essential for BSD submission
BSD_required = BSD_schema["required"]

# Which attributes are defined/undefined
defined = []
undefined = []
for i in BSD_lists:
    if i in BSD_defined:
        defined.append(i)
    else:
        undefined.append(i)
        
undefined_data = []
for u in undefined:
    for i in range(0,len(metadata)):
        if (list(metadata[i].keys())[0] == u):
            undefined_data.append(metadata[i])   

# Add pre-defined data to BSD_data
BSD_data = {}
for u in defined:
    for i in range(0,len(metadata)):
        if (list(metadata[i].keys())[0] == u):
            BSD_data.update(metadata[i]) 

# Combine undefined to "characteristics"
            
# 1. Flatten all undefined structures
def flatten_json(y):
    out = {}
    def flatten(x, name=''):
        if type(x) is dict:
            for a in x:
                flatten(x[a], name + a + '_')
        elif type(x) is list:
            i = 0
            for a in x:
                flatten(a, name + str(i) + '_')
                i += 1
        else:
            out[name[:-1]] = x
    flatten(y)
    return out

# 2. Clean names
    
# Remove duplicated words in names
def delete_duplicate(l):
    new_l = []
    for i in l:
        if i not in new_l:
            new_l.append(i)
    return new_l

def clean_names(l):
    out= []
    for i in l:
        temp = i.split('_')
        #Remove the autogenerated number in dictionary keys
        if (temp[0].isdigit()):
            temp.remove(temp[0])
        a = delete_duplicate(temp)
        i = " ".join(a)
        out.append(i)
    return out

undefined_keys = clean_names(list(flatten_json(undefined_data).keys()))
       
# Replace attribute names with more conside expression
def list_to_dictKeys(l,d):
    new_dict = {}
    if len(l) == len(d):
       for i in range(0,len(l)):
           new_dict[l[i]]= list(d.values())[i]
    return(new_dict)

undefined_data_flat = list_to_dictKeys(undefined_keys,flatten_json(undefined_data))

# Convert undefined to BSD "characteristics" format
# BSD json characteristics format: e.g.
# "characteristics":{
#    "A":[{"text":"a"}],
#    "B":[{"text":"b"}]
#  }

BSD_data["characteristics"] = {}
for k,v in undefined_data_flat.items():
    d,l,temp = {},[],{}
    temp["text"] = v
    l.append(temp)
    d[k] = l
    BSD_data["characteristics"] = {**BSD_data["characteristics"],**d}
    
BSD_data["name"] = sample_name
BSD_data["release"]= date
         
with open(BSD_out,"w") as out:
    json.dump(BSD_data,out)

        



